{{Header}}

// Base classes ##########################################################
// Leave this in order to use the base classes
namespace odatatools {
    enum Method {
        GET, POST, PUT, PATCH, DELETE
    }

    export class ProxyBase {
        constructor(public readonly Address: string, public readonly Name?: string, additonalHeaders?: odatajs.Header) {
            this.Name = this.Name || "ProxyService";

            this.Headers = { "Content-Type": "application/json", Accept: "application/json" };

            for (var attrname in additonalHeaders) { this.Headers[attrname] = additonalHeaders[attrname]; };
        }

        /**
         * All headers appended to each request.
         * 
         * @type {odatajs.Header}
         * @memberOf EntitySet
         */
        readonly Headers: odatajs.Header;
    }

    export abstract class ODataQueryOptionBase {
        private query: string[] = [];

        protected resolveODataOptions(): string {
            if (this.query.length > 0)
                return "?" + this.query.join("&");
            else
                return "";
        }

        protected addToQuery(element: string) {
            this.query.push(element);
        }
        protected emptyQuery(): void {
            this.query = [];
        }
    }

    export abstract class ODataQueryOptionsGetSingle<T> extends ODataQueryOptionBase {

    }

    export abstract class ODataQueryFilterOptions<T> extends ODataQueryOptionsGetSingle<T> {

        abstract Get(): Promise<T[]>;
        abstract Get(id: string): Promise<T>;

        abstract Count(): Promise<number>;

        /**
         * Selects properties on the elements. Works on Get() and Get(id).
         * 
         * @param {keyof T | (keyof T)[]} properties Use comma separated names without spaces
         * @returns {ODataQueryOptions<T>} 
         * 
         * @memberof ODataQueryOptions
         */
        Select(properties: keyof T | (keyof T)[] | string): ODataQueryFilterOptions<T> {
            if (typeof properties === "string")
                this.addToQuery("$select=" + properties);
            else
                this.addToQuery("$select=" + (<(keyof T)[]>properties).join(","));
            return this;
        }

        /**
         * Orders elements by the given property. Works only on Get()
         * 
         * @param {string} property Property on dataset to order by
         * @param {Order} [order=asc] Order "asc" for ascending and "desc" for descending.
         * @returns {ODataQueryFilterOptions<T>} 
         * 
         * @memberof ODataQueryFilterOptions
         */
        OrderBy(property: keyof T, order?: Order): ODataQueryFilterOptions<T> {
            this.addToQuery("$orderby=" + property + (order ? " " + order : ""));
            return this;
        }

        /**
         * Top selects the given number of element. Works only on Get()
         * 
         * @param {number} select number of elements to select
         * @returns {ODataQueryFilterOptions<T>} 
         * 
         * @memberof ODataQueryFilterOptions
         */
        Top(select: number): ODataQueryFilterOptions<T> {
            this.addToQuery("$top=" + select);
            return this;
        }

        /**
         * Skips the given number of elements and starts with element n + 1
         * 
         * @param {number} select Number of elements to skip
         * @returns {ODataQueryFilterOptions<T>} 
         * 
         * @memberof ODataQueryFilterOptions
         */
        Skip(select: number): ODataQueryFilterOptions<T> {
            this.addToQuery("$skip=" + select);
            return this;
        }

        /**
         * Filters by given criteria. See odata $filter convention for information on syntax.
         * 
         * @param {string} filter Filter syntax specified by odata V4 standard.
         * @returns {ODataQueryFilterOptions<T>} 
         * 
         * @memberof ODataQueryFilterOptions
         */
        Filter(filter: string): ODataQueryFilterOptions<T> {
            this.addToQuery("$filter=" + filter);
            return this;
        }


        /**
         * Expands given property or array of properties.
         * 
         * @param {(keyof T | (keyof T)[])} properties Properties to expand on.
         * @returns {ODataQueryFilterOptions<T>}
         * 
         * @memberof ODataQueryFilterOptions
         */
        Expand(properties: keyof T | (keyof T)[] | string): ODataQueryFilterOptions<T> {
            if (typeof properties === "string")
                this.addToQuery("$expand=" + properties);
            else
                this.addToQuery("$expand=" + (<(keyof T)[]>properties).join(","));
            return this;
        }

        /**
         * Searches for a value in the entity set as specified in OData protocol
         * 
         * @param {string} searchExpression Search specified in OData protocol
         * @returns {ODataQueryFilterOptions<T>} 
         * 
         * @memberof ODataQueryFilterOptions
         */
        Search(searchExpression: string): ODataQueryFilterOptions<T> {
            this.addToQuery("$search=" + searchExpression)
            return this;
        }

        Custom(customData: string): ODataQueryFilterOptions<T> {
            this.addToQuery(customData);
            return this;
        }
    }

    export type Order = "asc" | "desc";

    export type Partial<T> = {
        [P in keyof T]?: T[P];
    };

    /**
     * 
     * A generic entity set which represents the content of the entity container.
     * 
     * @export
     * @class EntitySet
     * @template T
     */
    export class EntitySet<T> extends ODataQueryFilterOptions<T> {

        /**
         * Creates an instance of EntitySet.
         * 
         * @param {string} name of the EntitySet (Will determine the address of the entityset, too -> address + "/" + name)
         * @param {string} address of the service
         * @param {string} key of the EntitySet
         * @param {odatajs.Header} [headers] additional headers: Per default there are "Content-Type" and "Accept".
         * 
         * @memberOf EntitySet
         */
        constructor(name: string, address: string, key: string, additionalHeaders?: odatajs.Header) {
            super();
            this.Name = name;
            this.Address = address.replace(/\/$/, "") + "/" + name;
            this.Key = key;
            this.Headers = { "Content-Type": "application/json", Accept: "application/json" };

            for (var attrname in additionalHeaders) { this.Headers[attrname] = additionalHeaders[attrname]; };
        }

        /**
         * Name of the Entity Set (which is appended to the URI)
         * @memberOf EntitySet
         */
        readonly Name: string;
        /**
         * Address of the OData Service
         * @memberOf EntitySet
         */
        readonly Address: string;

        /**
         * All headers appended to each request.
         * 
         * @type {odatajs.Header}
         * @memberOf EntitySet
         */
        readonly Headers: odatajs.Header;

        /**
         * Key of the entity
         * @memberOf EntitySet
         */
        readonly Key: string;

        /**
         * Gets all entries of an entity set. Use method chaining (call.Skip(10).Top(10).Get() before you call this method to create a query.
         * 
         * @returns {Promise<T[]>} 
         * 
         * @memberof EntitySet
         */
        Get(): Promise<T[]>
        /**
         * Gets one entry of the entity set by id.
         * 
         * @param {string} id 
         * @returns {Promise<T>} 
         * 
         * @memberof EntitySet
         */
        Get(id: string): Promise<T>;
        Get(id?: string): Promise<T | T[]> {
            return new Promise((resolve, reject) => {
                let requri: string;
                if (id) {
                    requri = this.Address + "(" + id + ")";
                } else {
                    requri = this.Address;
                }
                requri += this.resolveODataOptions();
                this.emptyQuery();
                let request: odatajs.Request = {
                    headers: this.Headers,
                    method: Method[Method.GET],
                    requestUri: requri
                }

                odatajs.oData.request(request, (data, response) => {
                    if(id) {
                        resolve(data);
                    } else {
                        resolve(data.value);
                    }
                }, (error) => {
                    console.error(error.name + " " + error.message + " | " + (error.response | error.response.statusText) + ":\n" + (error.response | error.response.body));
                    reject(error);
                });
            });
        }

        /**
         * Replaces an existing value in the entity collection.
         * 
         * @param {T} value to replace
         * @returns {Promise<T>} for async Operation. Use `await` keyword to get value or `.then` callback.
         * 
         * @memberOf EntitySet
         */
        Put(value: T): Promise<void> {
            return new Promise<void>((resolve, reject) => {
                let request: odatajs.Request = {
                    headers: this.Headers,
                    method: Method[Method.PUT],
                    requestUri: this.Address + "(" + value[this.Key] + ")",
                    data: value
                }
                odatajs.oData.request(request, (data, response) => {
                    resolve();
                }, (error) => {
                    console.error(error.name + " " + error.message + " | " + (error.response | error.response.statusText) + ":\n" + (error.response | error.response.body));
                    reject(error);
                });
            });
        }

        /**
         * Adds a new entry to an EntitySet
         * 
         * @param {T} value to ad to the EntitySet
         * @returns {Promise<T>} for async Operation. Use `await` keyword to get value or `.then` callback.
         * 
         * @memberOf EntitySet
         */
        Post(value: T): Promise<T> {
            return new Promise<T>((resolve, reject) => {
                let request: odatajs.Request = {
                    headers: this.Headers,
                    method: Method[Method.POST],
                    requestUri: this.Address,
                    data: value
                }
                odatajs.oData.request(request, (data, response) => {
                    resolve(data as T);
                }, (error) => {
                    console.error(error.name + " " + error.message + " | " + (error.response | error.response.statusText) + ":\n" + (error.response | error.response.body));
                    reject(error);
                });
            });
        }
        Patch(delta: Partial<T> | T): Promise<void>
        Patch(oldvalue: T, newValue: T): Promise<void>
        Patch(oldvalordelta: T | Partial<T>, newval?: T): Promise<void> {
            if (newval)
                oldvalordelta = this.getDelta(oldvalordelta as T, newval);

            return new Promise<void>((resolve, reject) => {
                let request: odatajs.Request = {
                    headers: this.Headers,
                    method: Method[Method.PATCH],
                    requestUri: this.Address,
                    data: oldvalordelta
                }
                odatajs.oData.request(request, (data, response) => {
                    resolve();
                }, (error) => {
                    console.error(error.name + " " + error.message + " | " + (error.response | error.response.statusText) + ":\n" + (error.response | error.response.body));
                    reject(error);
                });
            });
        }

        private getDelta(oldval: T, newVal: T): Partial<T> {
            let ret: any = {};
            for (let prop in newVal)
                if (oldval[prop] != newVal[prop])
                    ret[prop] = newVal[prop];
            return ret;
        }
        /**
         * Deletes a value from the entity set.
         * 
         * @param {T} value to delete
         * @returns {Promise<T>} for async Operation. Use `await` keyword to get value or `.then` callback.
         * 
         * @memberOf EntitySet
         */
        Delete(value: T): Promise<void> {
            return new Promise<void>((resolve, reject) => {
                let request: odatajs.Request = {
                    headers: this.Headers,
                    method: Method[Method.DELETE],
                    requestUri: this.Address + "(" + value[this.Key] + ")"
                }
                odatajs.oData.request(request, (data, response) => {
                    resolve();
                }, (error) => {
                    console.error(error.name + " " + error.message + " | " + (error.response | error.response.statusText) + ":\n" + (error.response | error.response.body));
                    reject(error);
                });
            });
        }

        Count(): Promise<number> {
            return new Promise<number>((resolve, reject) => {
                const requri = this.Address + "/$count/" + this.resolveODataOptions();
                let request: odatajs.Request = {
                    headers: this.Headers,
                    method: Method[Method.GET],
                    requestUri: requri
                }

                odatajs.oData.request(request, (data, response) => {
                    resolve(data);
                }, (error) => {
                    console.error(error.name + " " + error.message + " | " + (error.response | error.response.statusText) + ":\n" + (error.response | error.response.body));
                    reject(error);
                });
            });
        }
    }
    
    /**
     * 
     * A generic singleton which represents the content of the entity container.
     * 
     * @export
     * @class Singleton
     * @template T
     */
    export class Singleton<T> {

        /**
         * Creates an instance of EntitySet.
         * 
         * @param {string} name of the EntitySet (Will determine the address of the entityset, too -> address + "/" + name)
         * @param {string} address of the service
         * @param {string} key of the EntitySet
         * @param {odatajs.Header} [headers] additional headers: Per default there are "Content-Type" and "Accept".
         * 
         * @memberOf EntitySet
         */
        constructor(name: string, address: string, key: string, additionalHeaders?: odatajs.Header) {
            this.Name = name;
            this.Address = address.replace(/\/$/, "") + "/" + name;
            this.Headers = { "Content-Type": "application/json", Accept: "application/json" };

            for (var attrname in additionalHeaders) { this.Headers[attrname] = additionalHeaders[attrname]; };
        }

        /**
         * Name of the Entity Set (which is appended to the URI)
         * @memberOf EntitySet
         */
        readonly Name: string;
        /**
         * Address of the OData Service
         * @memberOf EntitySet
         */
        readonly Address: string;

        /**
         * All headers appended to each request.
         * 
         * @type {odatajs.Header}
         * @memberOf EntitySet
         */
        readonly Headers: odatajs.Header;

        /**
         * Gets the singleton. Use method chaining (call.Skip(10).Top(10).Get() before you call this method to create a query.
         * 
         * @returns {Promise<T>} 
         * 
         * @memberof Singleton
         */
        Get(): Promise<T>{
            return new Promise((resolve, reject) => {
                let requri: string;
                requri = this.Address;
                let request: odatajs.Request = {
                    headers: this.Headers,
                    method: Method[Method.GET],
                    requestUri: requri
                }

                odatajs.oData.request(request, (data, response) => {
                    resolve(data.value || data);
                }, (error) => {
                    console.error(error.name + " " + error.message + " | " + (error.response | error.response.statusText) + ":\n" + (error.response | error.response.body));
                    reject(error);
                });
            });
        }
        

        /**
         * Replaces a singleton value in the entity collection.
         * 
         * @param {T} value to replace
         * @returns {Promise<T>} for async Operation. Use `await` keyword to get value or `.then` callback.
         * 
         * @memberOf EntitySet
         */
        Put(value: T): Promise<void> {
            return new Promise<void>((resolve, reject) => {
                let request: odatajs.Request = {
                    headers: this.Headers,
                    method: Method[Method.PUT],
                    requestUri: this.Address,
                    data: value
                }
                odatajs.oData.request(request, (data, response) => {
                    resolve();
                }, (error) => {
                    console.error(error.name + " " + error.message + " | " + (error.response | error.response.statusText) + ":\n" + (error.response | error.response.body));
                    reject(error);
                });
            });
        }

        Patch(delta: Partial<T> | T): Promise<void>
        Patch(oldvalue: T, newValue: T): Promise<void>
        Patch(oldvalordelta: T | Partial<T>, newval?: T): Promise<void> {
            if (newval)
                oldvalordelta = this.getDelta(oldvalordelta as T, newval);

            return new Promise<void>((resolve, reject) => {
                let request: odatajs.Request = {
                    headers: this.Headers,
                    method: Method[Method.PATCH],
                    requestUri: this.Address,
                    data: oldvalordelta
                }
                odatajs.oData.request(request, (data, response) => {
                    resolve();
                }, (error) => {
                    console.error(error.name + " " + error.message + " | " + (error.response | error.response.statusText) + ":\n" + (error.response | error.response.body));
                    reject(error);
                });
            });
        }

        private getDelta(oldval: T, newVal: T): Partial<T> {
            let ret: any = {};
            for (let prop in newVal)
                if (oldval[prop] != newVal[prop])
                    ret[prop] = newVal[prop];
            return ret;
        }
    }

    class EntityContainer {
        constructor(name: string, uri: string) {
            this.Name = name;
            this.Uri = uri;
        }
        readonly Name: string;
        readonly Uri: string;
    }
}

declare namespace odatajs {
    class oData {
        static request(request: Request, success?: (data: any, response: any) => void, error?: (error: any) => void, handler?, httpClient?, metadata?);
    }

    interface Request {
        requestUri: string,
        method: string,
        headers: Header | Header[],
        data?: any
    }

    interface Header { [name: string]: string }
}

type JSDate = Date;

declare namespace Edm {
    export type Duration = string;
    export type Binary = string;
    export type Boolean = boolean;
    export type Byte = number;
    export type Date = JSDate;
    export type DateTimeOffset = JSDate;
    export type Decimal = number;
    export type Double = number;
    export type Guid = string;
    export type Int16 = number;
    export type Int32 = number;
    export type Int64 = number;
    export type SByte = number;
    export type Single = number;
    export type String = string;
    export type TimeOfDay = string;
    export type Stream = string;
    export type GeographyPoint = any;
}

console.log("Loaded odataproxybase");

// ###################################### Implementation ################

{{#each schemas as |schema|}}

namespace {{this.Namespace}} {

    {{#each this.EntityTypes}}
    export interface {{this.Name}} {
        {{#each this.Properties}}
        {{this.Name}}{{#if this.Nullable}}?{{/if}}: {{this.Type.Name}}{{#if this.Type.IsCollection}}[]{{/if}};
        {{/each}}
        {{#each this.NavigationProperties}}
        {{this.Name}}?: {{this.Type.Name}}{{#if this.Type.IsCollection}}[]{{/if}};
        {{/each}}
        {{#if this.OpenType}}[x: string]: any;{{/if}}
    }
    {{/each}}
    {{#each this.ComplexTypes}}
    export interface {{this.Name}} {
        {{#each this.Properties}}
        {{this.Name}}{{#if this.Nullable}}?{{/if}}: {{this.Type.Name}}{{#if this.Type.IsCollection}}[]{{/if}};
        {{/each}}
        {{#if this.OpenType}}[x: string]: any;{{/if}}
    }
    {{/each}}
    {{#each this.EnumTypes}}
    // Enum Values: {{#each this.Members}}{{this.Key}} = {{this.Value}}{{#unless @last}}, {{/unless}}{{/each}}
    export type {{this.Name}} = {{#each this.Members}}"{{this.Key}}"{{#unless @last}} | {{/unless}}{{/each}};
    {{/each}}

    {{#if this.EntityContainer}}
    export class {{this.EntityContainer.Name}} extends odatatools.ProxyBase {
        constructor(address: string, name?: string, additionalHeaders?: odatajs.Header) {
            super(address, name, additionalHeaders);
            {{#each this.EntityContainer.EntitySets}}
            this.{{this.Name}} = new {{this.Name}}EntitySet("{{this.Name}}", address, "{{this.EntityType.Key.Name}}", additionalHeaders);
            {{/each}}

            {{#each this.EntityContainer.Singletons}}
            this.{{this.Name}} = new {{this.Name}}Singleton("{{this.Name}}", address, "{{this.EntityType.Key.Name}}", additionalHeaders);
            {{/each}}
        }
        {{#each this.EntityContainer.EntitySets}}
        {{this.Name}}: {{this.Name}}EntitySet;
        {{/each}}

        {{#each this.EntityContainer.Singletons}}
        {{this.Name}}: {{this.Name}}Singleton;
        {{/each}}
        
        // Unbound Functions

        {{#each this.EntityContainer.FunctionImports}}
        {{this.Name}}({{#each this.Function.Parameters}}{{this.Name}}: {{this.Type.Name}}{{#if this.Type.IsCollection}}[]{{/if}}{{#unless @last}}, {{/unless}}{{/each}}): Promise<{{this.Function.ReturnType.Name}}{{#if this.ReturnType.IsCollection}}[]{{/if}}> {
            return new Promise<{{this.Function.ReturnType.Name}}{{#if this.ReturnType.IsCollection}}[]{{/if}}>((resolve, reject) => {
                let request: odatajs.Request = {
                    headers: this.Headers,
                    method: "GET",
                    requestUri: this.Address + "/{{this.Function.Name}}({{~#each this.Function.Parameters}}{{this.Name}}="+{{this.Name}}+"{{#unless @last}},{{/unless}}{{~/each}})",
                }
                odatajs.oData.request(request, (data, response) => {
                    resolve({{#unless this.ReturnType.IsVoid}}(data || {}).value || data{{/unless}});
                }, (error) => {
                    console.error(error.name + " " + error.message + " | " + (error.response | error.response.statusText) + ":" + (error.response | error.response.body));
                    reject(error);
                });
            });
        }
        {{/each}}

        //Unbound Actions

        {{#each this.EntityContainer.ActionImports}}
        {{this.Name}}({{#each this.Action.Parameters}}{{this.Name}}: {{this.Type.Name}}{{#if this.Type.IsCollection}}[]{{/if}}{{#unless @last}}, {{/unless}}{{/each}}): Promise<{{this.Action.ReturnType.Name}}{{#if this.ReturnType.IsCollection}}[]{{/if}}> {
            return new Promise<{{this.Action.ReturnType.Name}}{{#if this.ReturnType.IsCollection}}[]{{/if}}>((resolve, reject) => {
                let request: odatajs.Request = {
                    headers: this.Headers,
                    method: "POST",
                    requestUri: this.Address + "/{{this.Action.Name}}()",
                    data: {
                        {{#each this.Action.Parameters}}
                        {{this.Name}}: {{this.Name}},
                        {{/each}}
                    },
                }
                odatajs.oData.request(request, (data, response) => {
                    resolve({{#unless this.ReturnType.IsVoid}}(data || {}).value || data{{/unless}});
                }, (error) => {
                    console.error(error.name + " " + error.message + " | " + (error.response | error.response.statusText) + ":" + (error.response | error.response.body));
                    reject(error);
                });
            });
        }
        {{/each}}
    }
    {{/if}}
    {{#if this.EntityContainer.EntitySets.length}}
    //EntitySets
    {{/if}}
    {{#each this.EntityContainer.EntitySets as |eset|}}
    export class {{this.Name}}EntitySet extends odatatools.EntitySet<{{this.EntityType.Fullname}}> {
        constructor(name: string, address: string, key: string, additionalHeaders?: odatajs.Header) {
            super(name, address, key, additionalHeaders);
        }

        {{#if this.EntityType.Actions.length}}// Bound to entity Actions{{/if}}
        {{#each this.EntityType.Actions}}
        {{this.Name}}({{#each this.Parameters}}{{#if @first}}key: {{eset.EntityType.Key.Type.Name}}{{else}}{{this.Name}}: {{this.Type.Name}}{{#if this.Type.IsCollection}}[]{{/if}}{{/if}}{{#unless @last}}, {{/unless}}{{/each}}): Promise<{{this.ReturnType.Name}}{{#if this.ReturnType.IsCollection}}[]{{/if}}> {
            return new Promise<{{this.ReturnType.Name}}{{#if this.ReturnType.IsCollection}}[]{{/if}}>((resolve, reject) => {
                let request: odatajs.Request = {
                    headers: this.Headers,
                    method: "POST",
                    requestUri: this.Address + "(" + key + ")/{{schema.Namespace}}.{{this.Name}}()",
                    data: {
                        {{~#each this.Parameters}}{{~#unless @first}}
                        {{this.Name}}: {{this.Name}},
                        {{~/unless}}{{~/each}}
                    },
                }
                odatajs.oData.request(request, (data, response) => {
                    resolve({{#unless this.ReturnType.IsVoid}}(data || {}).value || data{{/unless}});
                }, (error) => {
                    console.error(error.name + " " + error.message + " | " + (error.response | error.response.statusText) + ":" + (error.response | error.response.body));
                    reject(error);
                });
            });
        }
        {{/each}}
        {{#if this.EntityType.Functions.length}}// Bound to entity Functions{{/if}}
        {{#each this.EntityType.Functions}}
        {{this.Name}}({{#each this.Parameters}}{{this.Name}}: {{this.Type.Name}}{{#if this.Type.IsCollection}}[]{{/if}}{{#if this.Type.IsCollection}}[]{{/if}}{{#unless @last}}, {{/unless}}{{/each}}): Promise<{{this.ReturnType.Name}}{{#if this.ReturnType.IsCollection}}[]{{/if}}> {
            return new Promise<{{this.ReturnType.Name}}{{#if this.ReturnType.IsCollection}}[]{{/if}}>((resolve, reject) => {
                let request: odatajs.Request = {
                    headers: this.Headers,
                    method: "GET",
                    requestUri: this.Address + "(" + {{this.Parameters.0.Name}} + ")/{{schema.Namespace}}.{{this.Name}}({{~#each this.Parameters}}{{#unless @first}}{{this.Name}}="+{{this.Name}}+"{{#unless @last}},{{/unless}}{{/unless}}{{~/each}})",
                }
                odatajs.oData.request(request, (data, response) => {
                    resolve({{#unless this.ReturnType.IsVoid}}(data || {}).value || data{{/unless}});
                }, (error) => {
                    console.error(error.name + " " + error.message + " | " + (error.response | error.response.statusText) + ":" + (error.response | error.response.body));
                    reject(error);
                });
            });
        }
        {{/each}}
        {{#if this.Functions.length}}// Bound to collection Functions{{/if}}
        {{#each this.Functions}}
        {{this.Name}}({{#each this.Parameters}}{{#unless @first}}{{this.Name}}: {{this.Type.Name}}{{#if this.Type.IsCollection}}[]{{/if}}{{#unless @last}}, {{/unless}}{{/unless}}{{/each}}): Promise<{{this.ReturnType.Name}}{{#if this.ReturnType.IsCollection}}[]{{/if}}> {
            return new Promise<{{this.ReturnType.Name}}{{#if this.ReturnType.IsCollection}}[]{{/if}}>((resolve, reject) => {
                let request: odatajs.Request = {
                    headers: this.Headers,
                    method: "GET",
                    requestUri: this.Address + "/{{schema.Namespace}}.{{this.Name}}({{~#each this.Parameters}}{{#unless @first}}{{this.Name}}="+{{this.Name}}+"{{#unless @last}},{{/unless}}{{/unless}}{{~/each}})",
                }
                odatajs.oData.request(request, (data, response) => {
                    resolve({{#unless this.ReturnType.IsVoid}}(data || {}).value || data{{/unless}});
                }, (error) => {
                    console.error(error.name + " " + error.message + " | " + (error.response | error.response.statusText) + ":" + (error.response | error.response.body));
                    reject(error);
                });
            });
        }
        {{/each}}
    }
    {{/each}}

    {{#if this.EntityContainer.Singletons.length}}
    //Singletons
    {{/if}}
    {{#each this.EntityContainer.Singletons as |eset|}}
    export class {{this.Name}}Singleton extends odatatools.Singleton<{{this.Type.Fullname}}> {
        constructor(name: string, address: string, key: string, additionalHeaders?: odatajs.Header) {
            super(name, address, key, additionalHeaders);
        }

        {{#if this.EntityType.Actions.length}}// Bound to entity Actions{{/if}}
        {{#each this.EntityType.Actions}}
        {{this.Name}}({{#each this.Parameters}}{{#if @first}}key: {{eset.EntityType.Key.Type.Name}}{{else}}{{this.Name}}: {{this.Type.Name}}{{#if this.Type.IsCollection}}[]{{/if}}{{/if}}{{#unless @last}}, {{/unless}}{{/each}}): Promise<{{this.ReturnType.Name}}{{#if this.ReturnType.IsCollection}}[]{{/if}}> {
            return new Promise<{{this.ReturnType.Name}}{{#if this.ReturnType.IsCollection}}[]{{/if}}>((resolve, reject) => {
                let request: odatajs.Request = {
                    headers: this.Headers,
                    method: "POST",
                    requestUri: this.Address + "(" + key + ")/{{schema.Namespace}}.{{this.Name}}()",
                    data: {
                        {{~#each this.Parameters}}{{~#unless @first}}
                        {{this.Name}}: {{this.Name}},
                        {{~/unless}}{{~/each}}
                    },
                }
                odatajs.oData.request(request, (data, response) => {
                    resolve({{#unless this.ReturnType.IsVoid}}(data || {}).value || data{{/unless}});
                }, (error) => {
                    console.error(error.name + " " + error.message + " | " + (error.response | error.response.statusText) + ":" + (error.response | error.response.body));
                    reject(error);
                });
            });
        }
        {{/each}}
        {{#if this.EntityType.Functions.length}}// Bound to entity Functions{{/if}}
        {{#each this.EntityType.Functions}}
        {{this.Name}}({{#each this.Parameters}}{{this.Name}}: {{this.Type.Name}}{{#if this.Type.IsCollection}}[]{{/if}}{{#if this.Type.IsCollection}}[]{{/if}}{{#unless @last}}, {{/unless}}{{/each}}): Promise<{{this.ReturnType.Name}}{{#if this.ReturnType.IsCollection}}[]{{/if}}> {
            return new Promise<{{this.ReturnType.Name}}{{#if this.ReturnType.IsCollection}}[]{{/if}}>((resolve, reject) => {
                let request: odatajs.Request = {
                    headers: this.Headers,
                    method: "GET",
                    requestUri: this.Address + "(" + {{this.Parameters.0.Name}} + ")/{{schema.Namespace}}.{{this.Name}}({{~#each this.Parameters}}{{#unless @first}}{{this.Name}}="+{{this.Name}}+"{{#unless @last}},{{/unless}}{{/unless}}{{~/each}})",
                }
                odatajs.oData.request(request, (data, response) => {
                    resolve({{#unless this.ReturnType.IsVoid}}(data || {}).value || data{{/unless}});
                }, (error) => {
                    console.error(error.name + " " + error.message + " | " + (error.response | error.response.statusText) + ":" + (error.response | error.response.body));
                    reject(error);
                });
            });
        }
        {{/each}}
        {{#if this.Functions.length}}// Bound to collection Functions{{/if}}
        {{#each this.Functions}}
        {{this.Name}}({{#each this.Parameters}}{{#unless @first}}{{this.Name}}: {{this.Type.Name}}{{#if this.Type.IsCollection}}[]{{/if}}{{#unless @last}}, {{/unless}}{{/unless}}{{/each}}): Promise<{{this.ReturnType.Name}}{{#if this.ReturnType.IsCollection}}[]{{/if}}> {
            return new Promise<{{this.ReturnType.Name}}{{#if this.ReturnType.IsCollection}}[]{{/if}}>((resolve, reject) => {
                let request: odatajs.Request = {
                    headers: this.Headers,
                    method: "GET",
                    requestUri: this.Address + "/{{schema.Namespace}}.{{this.Name}}({{~#each this.Parameters}}{{#unless @first}}{{this.Name}}="+{{this.Name}}+"{{#unless @last}},{{/unless}}{{/unless}}{{~/each}})",
                }
                odatajs.oData.request(request, (data, response) => {
                    resolve({{#unless this.ReturnType.IsVoid}}(data || {}).value || data{{/unless}});
                }, (error) => {
                    console.error(error.name + " " + error.message + " | " + (error.response | error.response.statusText) + ":" + (error.response | error.response.body));
                    reject(error);
                });
            });
        }
        {{/each}}
    }
    {{/each}}
}

{{/each}}
